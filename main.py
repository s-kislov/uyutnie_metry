import os
import json
import logging
import time
from datetime import datetime
from typing import Dict, Any, Optional, Union, List, Tuple

import aiohttp
import telebot
from telebot import types
from flask import Flask, request, jsonify, render_template_string, redirect, Response
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
PDF_FILE_ID = os.getenv('PDF_FILE_ID')
BOT_USERNAME = os.getenv('BOT_USERNAME')
GOOGLE_DRIVE_PDF_URL = os.getenv('GOOGLE_DRIVE_PDF_URL')
BONUS_PDF_URL = os.getenv('BONUS_PDF_URL', GOOGLE_DRIVE_PDF_URL)
IMAGE_URL = os.getenv('IMAGE_URL', '')
CHANNEL_POST_TITLE = os.getenv('CHANNEL_POST_TITLE', '–ü–û–î–ê–†–û–ö –î–õ–Ø –í–ê–° üéÅ')
CHANNEL_POST_DESCRIPTION = os.getenv('CHANNEL_POST_DESCRIPTION',
                                     '–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π *–ß–ï–ö-–õ–ò–°–¢ –ø–æ –≤—Å–µ–º —ç—Ç–∞–ø–∞–º —Ä–µ–º–æ–Ω—Ç–∞* ‚Äî –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç:\n\n‚úîÔ∏è –ø—Ä–æ–π—Ç–∏ —Ä–µ–º–æ–Ω—Ç —à–∞–≥ –∑–∞ —à–∞–≥–æ–º\n‚úîÔ∏è –∏–∑–±–µ–∂–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫\n‚úîÔ∏è –¥–µ—Ä–∂–∞—Ç—å –≤—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º')
CHANNEL_POST_CALL = os.getenv('CHANNEL_POST_CALL', 'üì• –ó–∞–±–∏—Ä–∞–π—Ç–µ —á–µ–∫-–ª–∏—Å—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ')
CHANNEL_LINK = os.getenv('CHANNEL_LINK', 'https://t.me/uyutnie_metry')
CHANNEL_BUTTON_TEXT = os.getenv('CHANNEL_BUTTON_TEXT', '–ó–ê–ë–†–ê–¢–¨ –ü–û–î–ê–†–û–ö')

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ –≤ HTML —Ç–µ–≥–∏
CHANNEL_POST_DESCRIPTION = (CHANNEL_POST_DESCRIPTION
                            .replace('<br>', '\n')
                            .replace('<br/>', '\n')
                            .replace('<br />', '\n'))
CHANNEL_POST_DESCRIPTION = ''.join(f'<b>{part}</b>' if i % 2 else part
                                   for i, part in enumerate(CHANNEL_POST_DESCRIPTION.split('*')))

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users: Dict[int, Dict[str, Any]] = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
CONFIG = {
    'channel_name': CHANNEL_ID.replace('@', ''),
    'channel_username': CHANNEL_ID,

    # –°–æ–æ–±—â–µ–Ω–∏—è
    'welcome_message': f'–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID} –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç.',
    'subscription_request': f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä–µ–º–æ–Ω—Ç—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID} –∏ –Ω–∞–∂–º–∏—Ç–µ /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.',
    'pdf_message': '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª! üéÅ\n\n–í–æ—Ç –í–∞—à —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä–µ–º–æ–Ω—Ç—É:',
    'pdf_message_repeat': '–í–æ—Ç –í–∞—à —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä–µ–º–æ–Ω—Ç—É:',

    # –ö–Ω–æ–ø–∫–∏
    'checklist_button_text': '–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç',
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∫ –¥–∞–Ω–Ω—ã–º
DATA_DIR = os.path.join(os.getcwd(), '.data')
USERS_FILE = os.path.join(DATA_DIR, 'users.json')


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users() -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(DATA_DIR):
            os.makedirs(DATA_DIR)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        serializable_users = {}
        for user_id, user_data in users.items():
            serializable_user = user_data.copy()
            if 'last_activity' in serializable_user and isinstance(serializable_user['last_activity'], datetime):
                serializable_user['last_activity'] = serializable_user['last_activity'].isoformat()
            if 'last_checked' in serializable_user and isinstance(serializable_user['last_checked'], datetime):
                serializable_user['last_checked'] = serializable_user['last_checked'].isoformat()
            serializable_users[str(user_id)] = serializable_user

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
        with open(USERS_FILE, 'w', encoding='utf-8') as file:
            json.dump(serializable_users, file, ensure_ascii=False, indent=2)

        logger.info(f'–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –≤—Å–µ–≥–æ: {len(users)}')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}')


def load_users() -> None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    global users
    try:
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, 'r', encoding='utf-8') as file:
                loaded_users = json.load(file)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
            for user_id_str, user_data in loaded_users.items():
                user_id = int(user_id_str)
                if 'last_activity' in user_data and isinstance(user_data['last_activity'], str):
                    try:
                        user_data['last_activity'] = datetime.fromisoformat(user_data['last_activity'])
                    except ValueError:
                        user_data['last_activity'] = datetime.now()
                if 'last_checked' in user_data and isinstance(user_data['last_checked'], str):
                    try:
                        user_data['last_checked'] = datetime.fromisoformat(user_data['last_checked'])
                    except ValueError:
                        user_data['last_checked'] = datetime.now()
                users[user_id] = user_data

            logger.info(f'–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        else:
            logger.info('–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
def send_welcome_with_button(chat_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(CONFIG['checklist_button_text']))

    bot.send_message(chat_id, CONFIG['welcome_message'], reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
def send_subscription_request(chat_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª."""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(
        text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
        url=f"https://t.me/{CONFIG['channel_username'].replace('@', '')}"
    ))

    bot.send_message(chat_id, CONFIG['subscription_request'], reply_markup=keyboard)


# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –∏–Ω–∞—á–µ False
    """
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
    max_attempts = 3

    for attempt in range(max_attempts):
        try:
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            await asyncio.sleep(0.5)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ API –±–æ—Ç–∞
            chat_member = bot.get_chat_member(CHANNEL_ID, user_id)
            status = chat_member.status

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            # –¢–æ–ª—å–∫–æ member, administrator –∏ creator —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏
            is_subscribed = status in ['member', 'administrator', 'creator']

            logger.info(f'–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {status} ({is_subscribed})')

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if is_subscribed:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                if user_id in users:
                    users[user_id]['is_subscribed'] = True
                    users[user_id]['last_checked'] = datetime.now()
                return True

            # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            if attempt < max_attempts - 1:
                await asyncio.sleep(1)

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}')
            if attempt < max_attempts - 1:
                await asyncio.sleep(1)

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    if user_id in users:
        users[user_id]['is_subscribed'] = False
        users[user_id]['last_checked'] = datetime.now()

    return False


# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscription_sync(user_id: int) -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    import asyncio

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
        result = loop.run_until_complete(check_subscription(user_id))

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop.close()

        return result
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±–µ—Ä—Ç–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}')
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
async def send_pdf_document(chat_id: int, user_id: int) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        bool: True –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∏–Ω–∞—á–µ False
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ PDF —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        already_sent = users.get(user_id, {}).get('pdf_sent', False)

        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ PDF –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        if user_id in users:
            users[user_id]['pdf_sent'] = True

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        message_text = CONFIG['pdf_message_repeat'] if already_sent else CONFIG['pdf_message']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ PDF
        bot.send_message(chat_id, message_text)

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º PDF —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL
            logger.info(f'–û—Ç–ø—Ä–∞–≤–∫–∞ PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}')

            # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            file_name = '–ß–µ–∫-–ª–∏—Å—Ç.pdf'

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            async with aiohttp.ClientSession() as session:
                async with session.get(BONUS_PDF_URL, timeout=30) as response:
                    if response.status != 200:
                        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ PDF: —Å—Ç–∞—Ç—É—Å {response.status}")

                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                    file_content = await response.read()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                    if len(file_content) <= 0:
                        raise Exception("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞ PDF (–±–∞–π—Ç—ã %PDF)
                    if len(file_content) >= 4 and not (
                            file_content[0] == 0x25 and  # %
                            file_content[1] == 0x50 and  # P
                            file_content[2] == 0x44 and  # D
                            file_content[3] == 0x46):  # F
                        logger.warning('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ PDF —Ñ–æ—Ä–º–∞—Ç–æ–º')

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                    bot.send_document(
                        chat_id,
                        (file_name, file_content),
                        caption='–ß–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä–µ–º–æ–Ω—Ç—É'
                    )

            logger.info(f'PDF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}')
            return True

        except Exception as error:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {error}')

            try:
                # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ URL
                logger.info('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF –ø–æ URL...')

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ url
                bot.send_document(
                    chat_id,
                    BONUS_PDF_URL,
                    caption='–ß–µ–∫-–ª–∏—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä–µ–º–æ–Ω—Ç—É'
                )

                logger.info(f'PDF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}')
                return True

            except Exception as second_error:
                logger.error(f'–û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {second_error}')

                # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                bot.send_message(
                    chat_id,
                    f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –°–∫–∞—á–∞–π—Ç–µ PDF –ø–æ —Å—Å—ã–ª–∫–µ: {BONUS_PDF_URL}'
                )

                return False

    except Exception as error:
        logger.error(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {error}')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        bot.send_message(
            chat_id,
            f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF. –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ: {BONUS_PDF_URL}'
        )

        return False


# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF
def send_pdf_document_sync(chat_id: int, user_id: int) -> bool:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    import asyncio

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
        result = loop.run_until_complete(send_pdf_document(chat_id, user_id))

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop.close()

        return result
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±–µ—Ä—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}')
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF
def check_and_send_pdf(chat_id: int, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω.

    Args:
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        bool: True –µ—Å–ª–∏ PDF –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∏–Ω–∞—á–µ False
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    is_subscribed = check_subscription_sync(user_id)

    if is_subscribed:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        return send_pdf_document_sync(chat_id, user_id)
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
        send_subscription_request(chat_id)
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
async def publish_post_to_channel() -> str:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π.

    Returns:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–æ–≤ <b> –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä–Ω—ã–µ
        clean_description = CHANNEL_POST_DESCRIPTION

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤
        open_tags = clean_description.count('<b>')
        close_tags = clean_description.count('</b>')

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥
        if open_tags != close_tags:
            logger.warning(f'–ù–µ—Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤ <b> ({open_tags}) –∏ </b> ({close_tags}). –ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º.')
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏ <b> –∏ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            clean_description = clean_description.replace('<b>', '').replace('</b>', '')
            clean_description = ''.join(f'<b>{part}</b>' if i % 2 else part
                                        for i, part in enumerate(clean_description.split('*')))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        post_text = f"<b>{CHANNEL_POST_TITLE}</b>\n\n{clean_description}\n\n<b>{CHANNEL_POST_CALL}</b>\n\n–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É—é—Ç–Ω—ã–π –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–æ–º \n–≤–º–µ—Å—Ç–µ —Å <a href=\"{CHANNEL_LINK}\">–£—é—Ç–Ω—ã–µ –º–µ—Ç—Ä—ã</a>üè°"

        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –≤—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        logger.info('–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:')
        logger.info(post_text)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text=CHANNEL_BUTTON_TEXT,
            url=f"https://t.me/{BOT_USERNAME}?start=checklist"
        ))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if IMAGE_URL:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–æ–π
            bot.send_photo(
                CHANNEL_ID,
                IMAGE_URL,
                caption=post_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )

            logger.info("–ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
            return "–ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!"
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
            bot.send_message(
                CHANNEL_ID,
                post_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )

            logger.info("–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
            return "–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!"

    except Exception as error:
        error_msg = f'–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {error}'
        logger.error(error_msg)
        raise Exception(error_msg)


# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
def publish_post_to_channel_sync() -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª."""
    import asyncio

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
        result = loop.run_until_complete(publish_post_to_channel())

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop.close()

        return result
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±–µ—Ä—Ç–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}')
        return f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def html_to_editable(text: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç HTML-—Ç–µ–≥–∏ –≤ –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if not text:
        return ''

    # –ó–∞–º–µ–Ω—è–µ–º <b> —Ç–µ–≥–∏ –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏
    text = text.replace('<b>', '*').replace('</b>', '*')

    # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã <br> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = text.replace('<br>', '\n').replace('<br/>', '\n').replace('<br />', '\n')

    return text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if user_id not in users:
        users[user_id] = {
            'user_id': user_id,
            'username': message.from_user.username or '',
            'welcome_sent': False,
            'pdf_sent': False,
            'is_subscribed': False,
            'last_activity': datetime.now()
        }

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[user_id]['last_activity'] = datetime.now()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    send_welcome_with_button(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
    check_and_send_pdf(chat_id, user_id)

    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    users[user_id]['welcome_sent'] = True

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check
@bot.message_handler(commands=['check'])
def handle_check(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    status_msg = bot.send_message(chat_id, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É...")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        is_subscribed = check_subscription_sync(user_id)

        if is_subscribed:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
            try:
                bot.delete_message(chat_id, status_msg.message_id)
            except Exception:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –ø–æ–¥–ø–∏—Å—á–∏–∫—É
            send_pdf_document_sync(chat_id, user_id)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
            try:
                bot.edit_message_text(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.",
                    chat_id=chat_id,
                    message_id=status_msg.message_id
                )
            except Exception:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            time.sleep(1)
            send_subscription_request(chat_id)

    except Exception as error:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /check: {error}')

        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            bot.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                chat_id=chat_id,
                message_id=status_msg.message_id
            )
        except Exception:
            pass


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_message(message):
    if not message.text:
        return

    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text

    logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}')

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in users:
        users[user_id]['last_activity'] = datetime.now()

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞
    if text == CONFIG['checklist_button_text']:
        check_and_send_pdf(chat_id, user_id)
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if user_id in users and users[user_id].get('welcome_sent'):
            bot.send_message(
                chat_id,
                f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"{CONFIG['checklist_button_text']}\" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            send_welcome_with_button(chat_id)

            if user_id in users:
                users[user_id]['welcome_sent'] = True
            else:
                users[user_id] = {
                    'user_id': user_id,
                    'username': message.from_user.username or '',
                    'welcome_sent': True,
                    'pdf_sent': False,
                    'is_subscribed': False,
                    'last_activity': datetime.now()
                }


# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app = Flask(__name__)


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def generate_users_csv() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    csv_content = 'ID,Username,Subscription Status,PDF Sent,Last Activity\n'

    for user_id, user_data in users.items():
        is_subscribed = 'Subscribed' if user_data.get('is_subscribed', False) else 'Not Subscribed'
        pdf_sent = 'Yes' if user_data.get('pdf_sent', False) else 'No'
        username = user_data.get('username', 'no_username')
        last_activity = user_data.get('last_activity', datetime.now())

        if isinstance(last_activity, datetime):
            last_activity = last_activity.isoformat()

        csv_content += f"{user_id},{username},{is_subscribed},{pdf_sent},{last_activity}\n"

    return csv_content


# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
@app.route('/admin')
def admin_panel():
    user_count = len(users)
    subscribed_users = sum(1 for user in users.values() if user.get('is_subscribed', False))
    pdf_sent_count = sum(1 for user in users.values() if user.get('pdf_sent', False))

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    editable_description = html_to_editable(CHANNEL_POST_DESCRIPTION)

    html_template = """
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1, h2 { color: #2c3e50; }
        .card { background: #f9f9f9; border-radius: 5px; padding: 15px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .stats { display: flex; justify-content: space-between; flex-wrap: wrap; }
        .stat-card { background: #fff; border-left: 4px solid #3498db; padding: 10px; width: 30%; margin-bottom: 15px; }
        button, .button { background: #3498db; color: white; border: none; padding: 10px 15px; border-radius: 4px; cursor: pointer; text-decoration: none; display: inline-block; }
        button:hover, .button:hover { background: #2980b9; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        table, th, td { border: 1px solid #ddd; }
        th, td { padding: 12px; text-align: left; }
        th { background-color: #f2f2f2; }
        form { margin-bottom: 20px; }
        input, textarea { width: 100%; padding: 8px; margin: 8px 0; box-sizing: border-box; }
        .help-text { color: #666; font-style: italic; margin: 5px 0; font-size: 0.9em; }
      </style>
    </head>
    <body>
      <h1>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram-–±–æ—Ç–æ–º</h1>
      
      <div class="card">
        <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        <div class="stats">
          <div class="stat-card">
            <h3>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
            <p>{{ user_count }}</p>
          </div>
          <div class="stat-card">
            <h3>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞</h3>
            <p>{{ subscribed_users }}</p>
          </div>
          <div class="stat-card">
            <h3>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ PDF</h3>
            <p>{{ pdf_sent_count }}</p>
          </div>
        </div>
      </div>
      
      <div class="card">
        <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ PDF –∏ –±–æ–Ω—É—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤</h2>
        <form action="/update-pdf-settings" method="post">
          <label for="bonusPdfUrl">URL –±–æ–Ω—É—Å–Ω–æ–≥–æ PDF-—Ñ–∞–π–ª–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º):</label>
          <input type="text" id="bonusPdfUrl" name="bonusPdfUrl" value="{{ bonus_pdf_url }}">
          
          <button type="submit">–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PDF</button>
        </form>
      </div>
      
      <div class="card">
        <h2>–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª</h2>
        <form action="/publish-post" method="post">
          <label for="title">–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
          <input type="text" id="title" name="title" value="{{ channel_post_title }}">
          
          <label for="description">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
          <p class="help-text">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ *–∑–≤–µ–∑–¥–æ—á–∫–∏* –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º</p>
          <textarea id="description" name="description" rows="5">{{ editable_description }}</textarea>
          
          <label for="call">–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é:</label>
          <input type="text" id="call" name="call" value="{{ channel_post_call }}">
          
          <label for="buttonText">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</label>
          <input type="text" id="buttonText" name="buttonText" value="{{ channel_button_text }}">
          
          <label for="imageUrl">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞):</label>
          <input type="text" id="imageUrl" name="imageUrl" value="{{ image_url }}">
          
          <button type="submit">–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç</button>
        </form>
      </div>
      
      <div class="card">
        <h2>–î–µ–π—Å—Ç–≤–∏—è</h2>
        <p><a href="/save-users" class="button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</a></p>
        <p><a href="/test-bot" class="button">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞</a></p>
        <p><a href="/test-pdf" class="button">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É PDF</a></p>
        <p><a href="/clear-users" class="button" onclick="return confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?')">–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</a></p>
      </div>
      <div class="card">
        <h2>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h2>
        <p><a href="/export-users" class="button" download>–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)</a></p>
        <p><a href="/export-users-json" class="button" download>–°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (JSON)</a></p>
      </div>
    </body>
    </html>
    """

    return render_template_string(
        html_template,
        user_count=user_count,
        subscribed_users=subscribed_users,
        pdf_sent_count=pdf_sent_count,
        bonus_pdf_url=BONUS_PDF_URL,
        channel_post_title=CHANNEL_POST_TITLE,
        editable_description=editable_description,
        channel_post_call=CHANNEL_POST_CALL,
        channel_button_text=CHANNEL_BUTTON_TEXT,
        image_url=IMAGE_URL or ''
    )

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV
@app.route('/export-users')
def export_users():
    csv_content = generate_users_csv()

    return Response(
        csv_content,
        mimetype='text/csv',
        headers={'Content-Disposition': 'attachment; filename=users.csv'}
    )

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON
@app.route('/export-users-json')
def export_users_json():
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    serializable_users = {}
    for user_id, user_data in users.items():
        serializable_user = user_data.copy()
        if 'last_activity' in serializable_user and isinstance(serializable_user['last_activity'], datetime):
            serializable_user['last_activity'] = serializable_user['last_activity'].isoformat()
        if 'last_checked' in serializable_user and isinstance(serializable_user['last_checked'], datetime):
            serializable_user['last_checked'] = serializable_user['last_checked'].isoformat()
        serializable_users[str(user_id)] = serializable_user

    return Response(
        json.dumps(serializable_users, ensure_ascii=False, indent=2),
        mimetype='application/json',
        headers={'Content-Disposition': 'attachment; filename=users.json'}
    )

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ PDF
@app.route('/update-pdf-settings', methods=['POST'])
def update_pdf_settings():
    global BONUS_PDF_URL

    try:
        bonus_pdf_url = request.form.get('bonusPdfUrl')

        # –û–±–Ω–æ–≤–ª—è–µ–º URL –±–æ–Ω—É—Å–Ω–æ–≥–æ PDF
        BONUS_PDF_URL = bonus_pdf_url

        html_response = """
        <h1>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ PDF —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</h1>
        <p>–ù–æ–≤—ã–π URL –±–æ–Ω—É—Å–Ω–æ–≥–æ PDF: {}</p>
        <p><a href="/admin">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a></p>
        """

        return html_response.format(bonus_pdf_url)
    except Exception as e:
        html_error = """
        <h1>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ PDF</h1>
        <p>{}</p>
        <p><a href="/admin">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a></p>
        """

        return html_error.format(str(e)), 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
@app.route('/publish-post', methods=['POST'])
def publish_post():
    global CHANNEL_POST_TITLE, CHANNEL_POST_DESCRIPTION, CHANNEL_POST_CALL, CHANNEL_BUTTON_TEXT, IMAGE_URL

    try:
        title = request.form.get('title')
        description = request.form.get('description')
        call = request.form.get('call')
        button_text = request.form.get('buttonText')
        image_url = request.form.get('imageUrl')

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        CHANNEL_POST_TITLE = title

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        formatted_description = description.replace('\r\n', '\n').replace('\n{3,}', '\n\n').strip()
        CHANNEL_POST_DESCRIPTION = ''.join(f'<b>{part}</b>' if i % 2 else part
                                         for i, part in enumerate(formatted_description.split('*')))

        CHANNEL_POST_CALL = call
        CHANNEL_BUTTON_TEXT = button_text
        IMAGE_URL = image_url

        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
        result = publish_post_to_channel_sync()

        html_response = """
        <h1>–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</h1>
        <p>{}</p>
        <p><a href="/admin">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a></p>
        """

        return html_response.format(result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")

        html_error = """
        <h1>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞</h1>
        <p>{}</p>
        <p><a href="/admin">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a></p>
        """

        return html_error.format(str(e)), 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.route('/save-users')
def save_users_route():
    save_users()

    html_response = """
    <h1>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</h1>
    <p><a href="/admin">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a></p>
    """

    return html_response

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞
@app.route('/test-bot')
def test_bot():
    try:
        me = bot.get_me()

        html_response = """
        <h1>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</h1>
        <p>–ò–º—è –±–æ—Ç–∞: {}</p>
        <p>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{}</p>
        <p><a href="/admin">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a></p>
        """

        return html_response.format(me.first_name, me.username)
    except Exception as e:
        html_error = """
        <h1>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞</h1>
        <p>{}</p>
        <p><a href="/admin">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a></p>
        """

        return html_error.format(str(e)), 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PDF
@app.route('/test-pdf')
def test_pdf():
    try:
        import aiohttp
        import asyncio

        async def check_pdf():
            async with aiohttp.ClientSession() as session:
                async with session.get(BONUS_PDF_URL, timeout=30) as response:
                    status = response.status
                    content_type = response.headers.get('Content-Type', '')

                    file_content = await response.read()
                    file_size = len(file_content)

                    is_pdf = (
                        file_size >= 4 and
                        file_content[0] == 0x25 and  # %
                        file_content[1] == 0x50 and  # P
                        file_content[2] == 0x44 and  # D
                        file_content[3] == 0x46      # F
                    )

                    first_20_bytes = ''.join(f'{b:02x}' for b in file_content[:20])

                    return {
                        'status': status,
                        'content_type': content_type,
                        'file_size': file_size,
                        'is_pdf': is_pdf,
                        'first_20_bytes': first_20_bytes
                    }

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(check_pdf())
        loop.close()

        html_response = """
        <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ PDF-—Ñ–∞–π–ª–∞</h1>
        <p>URL: {url}</p>
        <p>HTTP —Å—Ç–∞—Ç—É—Å: {status}</p>
        <p>Content-Type: {content_type}</p>
        <p>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size} –ö–ë</p>
        <p>–§–æ—Ä–º–∞—Ç PDF: {is_pdf}</p>
        <p>–ü–µ—Ä–≤—ã–µ 20 –±–∞–π—Ç: {bytes}</p>
        <p><a href="/admin">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a></p>
        """

        return html_response.format(
            url=BONUS_PDF_URL,
            status=result['status'],
            content_type=result['content_type'],
            size=round(result['file_size'] / 1024, 2),
            is_pdf='–î–∞' if result['is_pdf'] else '–ù–µ—Ç',
            bytes=result['first_20_bytes']
        )
    except Exception as e:
        html_error = """
        <h1>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PDF-—Ñ–∞–π–ª–∞</h1>
        <p>URL: {url}</p>
        <p>–û—à–∏–±–∫–∞: {error}</p>
        <p><a href="/admin">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a></p>
        """

        return html_error.format(url=BONUS_PDF_URL, error=str(e)), 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.route('/clear-users')
def clear_users():
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users.clear()
    save_users()

    html_response = """
    <h1>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω—ã</h1>
    <p><a href="/admin">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a></p>
    """

    return html_response

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
@app.route('/publish-post-manually')
def publish_post_manually():
    try:
        result = publish_post_to_channel_sync()
        return result
    except Exception as e:
        return f'–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}', 500

# –†–µ–¥–∏—Ä–µ–∫—Ç —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
@app.route('/')
def root():
    return redirect('/admin')

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.route('/ping')
def ping():
    return 'OK', 200

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def periodic_save():
    while True:
        time.sleep(60)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        try:
            save_users()
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}')

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    import threading
    import asyncio

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    load_users()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    save_thread = threading.Thread(target=periodic_save, daemon=True)
    save_thread.start()

    # –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    port = int(os.environ.get('PORT', 8080))

    # –ó–∞–ø—É—Å–∫–∞–µ–º flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(
        target=lambda: app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False),
        daemon=True
    )
    flask_thread.start()

    logger.info(f'–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}')
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (—ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π)
    bot.polling(none_stop=True, interval=1)

if __name__ == '__main__':
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    import asyncio
    main()